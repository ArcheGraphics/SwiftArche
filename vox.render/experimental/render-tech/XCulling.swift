//  Copyright (c) 2023 Feng Yang
//
//  I am making my contributions/submissions to this project solely in my
//  personal capacity and am not conveying any rights to any intellectual
//  property of any third parties.

import Math

// Options for types of culling to apply.
public struct XRenderCullType: OptionSet {
    public let rawValue: UInt32

    // this initializer is required, but it's also automatically
    // synthesized if `rawValue` is the only member, so writing it
    // here is optional:
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }

    public static let None = XRenderCullType([])
    public static let Frustum = XRenderCullType(rawValue: 1)
    public static let FrustumDepth = XRenderCullType(rawValue: 2)
    public static let Count = XRenderCullType(rawValue: 3)
    public static let Visualization = XRenderCullType(rawValue: XRenderCullType.FrustumDepth.rawValue | 0x10000)
}

struct XICBData {
    // Default indirect command buffers.
    var commandBuffer: MTLIndirectCommandBuffer!
    var commandBuffer_alphaMask: MTLIndirectCommandBuffer!
    var commandBuffer_transparent: MTLIndirectCommandBuffer!
    // Indirect command buffers for depth only rendering which has fewer buffers.
    var commandBuffer_depthOnly: MTLIndirectCommandBuffer!
    var commandBuffer_depthOnly_alphaMask: MTLIndirectCommandBuffer!
    // Buffer to store the execution range for the ICB.
    var executionRangeBuffer: MTLBuffer!
    // Buffer containing a AAPLEncodeArguments argument buffer.
    var icbEncodeArgsBuffer: MTLBuffer!
    var icbEncodeArgsBuffer_alphaMask: MTLBuffer!
    var icbEncodeArgsBuffer_transparent: MTLBuffer!
    // Output buffer for chunk visualization.
    var chunkVizBuffer: MTLBuffer!
}

class XCulling {
    // Initializes this culling object, allocating compute pipelines and argument encoders.
    init(with device: MTLDevice,
         library: MTLLibrary,
         useRasterizationRate: Bool,
         genCSMUsingVertexAmplification: Bool) {
    }

    func rebuildPipelines(with library: MTLLibrary,
                          useRasterizationRate: Bool,
                          genCSMUsingVertexAmplification: Bool) {
    }

    // Initializes `AAPLICBData` argument buffers for rendering the results of
    //  culling for a specific mesh.
    func initCommandData(_ commandData: XICBData,
                         forMesh: XMesh,
                         chunkViz: Bool,
                         frameData: MTLBuffer,
                         globalTexturesBuffer: MTLBuffer,
                         lightParamsBuffer: MTLBuffer) {
    }

    // Executes the culling for `AAPLRenderModeIndirect` render mode on GPU with depth texture
    //  and depth pyramid.
    func executeCulling(commandData: XICBData,
                        frameViewData: XFrameViewData,
                        frameDataBuffer: MTLBuffer,
                        cullMode: XRenderCullType,
                        pyramidTexture: MTLTexture,
                        mainPass: Bool,
                        depthOnly: Bool,
                        mesh: XMesh,
                        materialBuffer: MTLBuffer,
                        rrData: MTLBuffer,
                        onEncoder: MTLComputeCommandEncoder) {
    }

    #if SUPPORT_CSM_GENERATION_WITH_VERTEX_AMPLIFICATION
    func executeCullingFiltered(commandData: XICBData,
                                frameViewData1: XFrameViewData,
                                frameViewData2: XFrameViewData,
                                frameDataBuffer: MTLBuffer,
                                cullMode: XRenderCullType,
                                pyramidTexture1: MTLTexture,
                                pyramidTexture2: MTLTexture,
                                mesh: XMesh,
                                materialBuffer: MTLBuffer,
                                onEncoder: MTLComputeCommandEncoder) {
    }
    #endif

    // Clears the indirect command buffer generated by the culling phase.
    func resetIndirectCommandBuffersForViews(commandData: XICBData,
                                             viewCount: Int,
                                             mainPass: Bool,
                                             depthOnly: Bool,
                                             mesh: XMesh,
                                             onCommandBuffer: MTLCommandBuffer) {
    }

    // Optimizes the contents of the indirect command buffer generated by the culling phase.
    func optimizeIndirectCommandBuffersForViews(commandData: XICBData,
                                                viewCount: Int,
                                                mainPass: Bool,
                                                depthOnly: Bool,
                                                mesh: XMesh,
                                                onCommandBuffer: MTLCommandBuffer) {
    }
}
